This document will describe the basic layout that all packages of the SiTech
library will take. It will also revise how all the files will interact with
each other.

Table of Contents
    1. SiTech Layout
        1.1 Documentation
        1.2 Tests
        1.3 Tools
    2. Package Layout
        2.1 Package Naming
            2.1.1 Package Name Approval
        2.2 Directory Structure
        2.3 File Structure
            2.3.1 Abstract and Interface Files

1. SiTech Layout

    This section will define how all of the base files of the SiTech project
    itself should be laid out. This does not pertain to packages themselves, but
    the base directory structure of the project.
    
1.1 Documentation

    Any technical documentation should reside in the Docs/ folder. Each document
    that is in the main folder must be named in a manner that describes what the
    document is about.
    
    Sub folders may be used within the Docs/ folder for specific items. There
    should also bee a Docs/Packages/ folder for documentation on each package.
    The documentation within this folder should be hand written documentation
    that conforms to the package name.
    
    For generated documentation (phpdoc) we will use a seperate folder called
    Docs/Generated/. Within here, any phpdoc generated documentation will be
    stored.
    
1.2 Tests

    All tests will be located in the Tests/ folder of the project.
    
    Each package should have its own test script to verify that everything that
    is needed to use the package is available. If applicable, it should also
    test that the package itself works with a quick and simple test.
    
    The layout of the tests should conform to the package naming described in
    Section 2.1 and the Directory and File structure of Section 2.2 and 2.3.
    Multiple tests can exist within a single file, but only for the specified
    package.
    
1.3 Tools

    Tools or scripts needed for packages will reside in the Tools/ folder. This
    should include any setup scripts, SQL code, or other neccisary items that
    are related to the packages setup and installation.
    
    The layout of the tools should conform to the package naming described in
    Section 2.1 and the Directory and File structure of Section 2.2 and 2.3.

2. Package Layout

    This section defines how each package should be laid out. Each package that
    exists within the SiTech library should conform to these specifications. The
    base directory structure will begin in the lib/SiTech folder, which will
    from now on be refered to as the "main folder".
    
2.1 Package Naming
    
    Each package within the SiTech library should have its own unique name. This
    name will begin with "SiTech_" to designate that it is part of the SiTech
    library. The package name must then follow this name.
    
    Examples:
    
      SiTech_DB
      SiTech_Session
      
    Within each package, there can be sub packages, and even sub-sub packages
    and so on. Each of these should also conform to the same naming convention.
    
    Examples:
    
      SiTech_DB_Driver_MySQL
      SiTech_DB_Driver_SQLite
      SiTech_Session_File
      SiTech_Session_DB
    
    This layout can extend as far as the sub packages go, making sure to
    specifically and uniqely name each sub package.
    
2.1.1 Package Name Approval

    All package names must go through an approval process before they are
    accepted into the SiTech library. This process will be revised at a later
    time.
    
2.2 Directory Structure

    Within the main folder, each package may have a signle folder for it's files
    to reside in. The name of the package folder must conform to the package
    name itself (See section 1.1). Each package may also have sub packages, or
    even sub-sub packages and so on. The directory structure must stay the same
    as each package or sub package name.
    
    Examples:
    
      SiTech_DB = lib/SiTech/DB
      SiTech_DB_Driver = lib/SiTech/DB/Driver/
      SiTech_Session = lib/SiTech/Session
    

2.3 File Structure

    Each package may have its own main file within the main folder. This file's
    name must conform to the package name itself.
    
    Examples:
    
        SiTech_DB = lib/SiTech/DB.php
        SiTech_Session = lib/SiTech/Session.php
        SiTech_DB_Driver_MySQL = lib/SiTech/DB/Driver/MySQL.php
    
    This will create a uniform and clean way of structuring files within the
    library.
    
2.3.1 Abstract and Interface Files

    Any package or sub package may have an abstract class or an interface file.
    In fact, the use of interface files and abstract classes is encouraged as it
    will help to make sure all packages conform to a specific API.
    
    The abstract file will conform to the naming convention of
    SiTech_Package_Abstract. The interface files will also conform to the same
    style of naming convention of SiTech_Package_Interface.
    
    Examples:
    
      SiTech_DB_Driver_Interface = lib/SiTech/DB/Driver/Interface.php
      SiTech_DB_Driver_Abstract = lib/SiTech/DB/Driver/Abstract.php
    
    If the package contains an interface or abstract class, all other classes
    that exist within the package must extend the abstract class or implement
    the interface.
    
    For packages that have both an interface and an abstract class, the abstract
    class must implement the interface, then any other classes must extend the
    abstract class.
    
    Examples:
    
      interface SiTech_DB_Driver_Interface {...}
      class SiTech_DB_Driver_Abstract implements SiTech_DB_Driver_Interface {...}
      class SiTech_DB_Driver_MySQL extends SiTech_DB_Driver_Abstract {...}
      class SiTech_DB_Driver_SQLite extends SiTech_DB_Driver_Abstract {...}
    
    